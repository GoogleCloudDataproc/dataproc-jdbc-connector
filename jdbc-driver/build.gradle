/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
    id 'java'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '6.0.0'
}

group 'com.google.cloud.dataproc'
version '1.0-SNAPSHOT'

dependencies {
    compile project(path: ':hive', configuration: 'shadow')
    compile 'com.google.cloud:google-cloud-dataproc:1.0.0'
    testImplementation 'org.mockito:mockito-core:3.4.0'
}

jar {
    zip64 = true
    from(configurations.runtime.collect{ it.isDirectory() ? it : zipTree(it) }) {
        exclude 'META-INF/services/java.sql.Driver' // Don't let Gradle merge service files
    }

    // Include service files from the buildDir.
    from fileTree(buildDir).matching{ include 'META-INF/services/java.sql.Driver' }
}

shadowJar {
    zip64 = true
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'com.google.cloud.dataproc'
            artifactId = 'dataproc-jdbc-connector'
            version = '1.0-SNAPSHOT'

            from components.java
        }
    }
}

sourceSets {
    systemTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/systemTest/java')
        }
        resources.srcDir file('src/systemTest/resources')
    }
}

configurations {
    systemTestImplementation.extendsFrom testImplementation
    systemTestRuntimeOnly.extendsFrom testRuntimeOnly
}

task systemTest(type: Test) {
    testClassesDirs = sourceSets.systemTest.output.classesDirs
    classpath = sourceSets.systemTest.runtimeClasspath
}

systemTest {
    systemProperties(System.getProperties())
    testLogging {
        events = ["standard_out"]
    }
}